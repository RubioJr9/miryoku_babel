# Copyright 2019 Manna Harbour
# https://github.com/manna-harbour/miryoku

* Miryoku Babel [[https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/logos/miryoku-roa-32.png]]

[[https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/cover/miryoku-kle-cover.png]]

[[https://github.com/manna-harbour/miryoku/][Miryoku]] is an ergonomic, minimal, orthogonal, and universal keyboard layout.  [[https://github.com/manna-harbour/miryoku_babel][Miryoku Babel]] generates the layer data source files for Miryoku implementations from a single source.


** Introduction

[[https://www.gnu.org/software/emacs/][Emacs]] is an extensible text editor.  [[https://orgmode.org/][Org]] is an emacs mode for structured text.

[[#layer-tables][Layers]] are maintained in org tables.  The tables are [[#tangling][tangled]] into Miryoku implementation [[#tangled-files][source files]] via [[#scripts-and-data][python scripts and additional data tables]].

Changes to Miryoku layers can be made with convenient [[https://orgmode.org/manual/Built_002din-Table-Editor.html][org table editing commands]].

For those not using emacs, changes can also be made in any editor and the tangling can be performed from the shell or via a GitHub actions workflow.

The scripts can also be used by other layouts to generated multi-firmware keymaps from a single source.


** Tangling


*** Locally

Emacs, python, and org 9.4 or later are required.


**** Within Emacs


***** Initial Setup

Add the following to your emacs initialisation file:

#+BEGIN_SRC emacs-lisp
(require 'ob-python)
(setq org-confirm-babel-evaluate nil)
(setq python-indent-guess-indent-offset-verbose nil)
#+END_SRC


***** Tangle

Call ~org-babel-tangle~ (~C-c~ ~C-v~ ~t~).


**** Outside Emacs

See the Install Org and Tangle steps in [[.github/workflows/main.yml]] for example shell commands that can be run locally.


*** GitHub Actions Workflow


***** Initial Setup

Log in to GitHub, fork the Miryoku Babel repository, and enable workflows.

The Test workflow is not applicable when using the Build workflow and should be prevented from running on push by deleting the [[https://github.com/manna-harbour/miryoku_babel/blob/2cb587dfd19da61f584a4a3b0d57ff9b6c6ccf87/.github/workflows/test.yml#L3][push line in .github/workflows/test.yml]].


***** Tangle

Visit the Actions tab, select the Build workflow, select Run workflow, select the Branch if desired, activate Run workflow, select the Artifacts, and unzip the downloaded zip file.




** Layer Tables

The layers are maintained in tables.  ~U_NP~ indicates the key is not present and is used to fill in the table around the thumb keys.

Basic keycodes are entered without the ~KC_~ prefix.  Symbols can be entered as-is, except for '-' (~MINS~), '.' (~DOT~), '|' (~PIPE~), and '"' (~DQUO~). Empty cells are unused.

The base layer is maintained as separate tables for tap alphas, tap thumbs, and hold.  Other layers are specified as a single hand including thumbs.  Tables are combined to produce the keymap data for each layer.


*** Base


**** Tap


***** Alphas

#+NAME: colemakdh
| Q     | W     | F     | P     | B     | J     | L     | U     | Y     | '     |
| A     | R     | S     | T     | G     | M     | N     | E     | I     | O     |
| Z     | X     | C     | D     | V     | K     | H     | ,     | DOT   | /     |


***** Thumbs

#+NAME: thumbs
| U_NP | U_NP | TAB | E | ESC | ENT | SPC | BSPC | U_NP | U_NP |


**** Hold

#+NAME: hold
| RESET |      |      |      |       |      |      |      |      | RESET |
| LGUI  | LALT | LCTL | LSFT |       |      | LSFT | LCTL | LALT | LGUI  |
|       | ALGR |      |      | MOUSE | FUNL |      |      | ALGR |       |
| U_NP  | U_NP | MEDR | NAVR | NR    | NSL  | PL   | BL   | U_NP | U_NP  |


*** Nav

#+NAME: nav-r
| U_RDO | U_PST | U_CPY | U_CUT | U_UND |
| CAPS  | LEFT  | DOWN  | UP    | RGHT  |
| INS   | HOME  | PGDN  | PGUP  | END   |
| ENT   | DEL   | BSPC  | U_NP  | U_NP  |


*** Mouse

#+NAME: mouse-r
| U_RDO | U_PST | U_CPY | U_CUT | U_UND |
|       | MS_L  | MS_D  | MS_U  | MS_R  |
|       | WH_L  | WH_D  | WH_U  | WH_R  |
| BTN1  | BTN3  | BTN2  | U_NP  | U_NP  |


*** Button

#+NAME: button
| U_UND | U_CUT | U_CPY | U_PST | U_RDO | U_RDO | U_PST | U_CPY | U_CUT | U_UND |
| LGUI  | LALT  | LCTL  | LSFT  |       |       | LSFT  | LCTL  | LALT  | LGUI  |
| U_UND | U_CUT | U_CPY | U_PST | U_RDO | U_RDO | U_PST | U_CPY | U_CUT | U_UND |
| U_NP  | U_NP  | BTN2  | BTN3  | BTN1  | BTN1  | BTN3  | BTN2  | U_NP  | U_NP  |


*** Media

#+NAME: media-r
| RGB_TOG  | RGB_MOD  | RGB_HUI  | RGB_SAI  | RGB_VAI  |
| OUT_AUTO | MPRV     | VOLD     | VOLU     | MNXT     |
| U_BTCLR  | U_BTSEL0 | U_BTSEL1 | U_BTSEL2 | U_BTSEL3 |
| MSTP     | MPLY     | MUTE     | U_NP     | U_NP     |


*** Num

#+NAME: num-r
| (   | 7 |   8 |    9 | )    |
| +   | 1 |   2 |    3 | 4    |
| -   | 5 |   6 |    * | /    |
| SPC | 0 | DOT | U_NP | U_NP |


*** Sym

#+NAME: sym-l
| {    | &    | *    | (    | }    |
| :    | $    | %    | ^    | +    |
| ~    | !    | @    | #    | PIPE |
| U_NP | U_NP | (    | )    | _    |


*** Fun
#+NAME: fun-l
| F10  | F9   | F8  | F7  | PSCR |
| F4   | F3   | F2  | F1  | SLCK |
| F12  | F11  | F6  | F5  | PAUS |
| U_NP | U_NP | APP | SPC | TAB  |


*** Brackets (~BL~)
#+NAME: bl-l
| }    | >    | ] | ) |   |
| {    | <    | [ | ( |   |
| }    | >    | ] | ) |   |
| U_NP | U_NP |   | = | _ |

*** Punctuation (~PL~)
#+NAME: pl-l
|      | `    | @    | ~ |   |
| ?    | !    | DQUO | ' |   |
|      |      | &    | \ |   |
| U_NP | U_NP | PIPE | ; | : |

*** Number Symbols (~NSL~)
#+NAME: nsl-l
| RGB_TOG |      |      | $ |   |
| *       | /    | MINS | + |   |
|         |      | %    | # |   |
| U_NP    | U_NP | ^    | = | _ |


*** Alternative Layouts


**** Alphas


***** AZERTY

~MIRYOKU_ALPHAS=AZERTY~

#+NAME: azerty
| A    | Z    | E    | R    | T    | Y    | U    | I    | O    | P    |
| Q    | S    | D    | F    | G    | H    | J    | K    | L    | M    |
| W    | X    | C    | V    | B    | N    | ,    | DOT  | /    | '    |


***** Colemak

~MIRYOKU_ALPHAS=COLEMAK~

#+NAME: colemak
| Q    | W    | F    | P    | G    | J    | L    | U    | Y    | '    |
| A    | R    | S    | T    | D    | H    | N    | E    | I    | O    |
| Z    | X    | C    | V    | B    | K    | M    | ,    | DOT  | /    |


***** Colemak Mod-DHk

~MIRYOKU_ALPHAS=COLEMAKDHK~

#+NAME: colemakdhk
| Q    | W    | F    | P    | B    | J    | L    | U    | Y    | '    |
| A    | R    | S    | T    | G    | K    | N    | E    | I    | O    |
| Z    | X    | C    | D    | V    | M    | H    | ,    | DOT  | /    |


***** Dvorak

~MIRYOKU_ALPHAS=DVORAK~

#+NAME: dvorak
| '    | ,    | DOT  | P    | Y    | F    | G    | C    | R    | L    |
| A    | O    | E    | U    | I    | D    | H    | T    | N    | S    |
| /    | Q    | J    | K    | X    | B    | M    | W    | V    | Z    |


***** Halmak

~MIRYOKU_ALPHAS=HALMAK~

#+NAME: halmak
| W    | L    | R    | B    | Z    | '    | Q    | U    | D    | J    |
| S    | H    | N    | T    | ,    | DOT  | A    | E    | O    | I    |
| F    | M    | V    | C    | /    | G    | P    | X    | K    | Y    |


***** Workman

~MIRYOKU_ALPHAS=WORKMAN~

#+NAME: workman
| Q    | D    | R    | W    | B    | J    | F    | U    | P    | '    |
| A    | S    | H    | T    | G    | Y    | N    | E    | O    | I    |
| Z    | X    | M    | C    | V    | K    | L    | ,    | DOT  | /    |


***** QWERTY

~MIRYOKU_ALPHAS=QWERTY~

#+NAME: qwerty
| Q    | W    | E    | R    | T    | Y    | U    | I    | O    | P    |
| A    | S    | D    | F    | G    | H    | J    | K    | L    | '    |
| Z    | X    | C    | V    | B    | N    | M    | ,    | DOT  | /    |


***** QWERTZ

~MIRYOKU_ALPHAS=QWERTZ~

#+NAME: qwertz
| Q    | W    | E    | R    | T    | Z    | U    | I    | O    | P    |
| A    | S    | D    | F    | G    | H    | J    | K    | L    | '    |
| Y    | X    | C    | V    | B    | N    | M    | ,    | DOT  | /    |


***** RSTHP

~MIRYOKU_ALPHAS=RSTHP~

#+NAME: rsthp
|      | C    | Y   | F | K   | Z   | L   | ,    | U    | Q          |
| R    | S    | T   | H | P   | W   | N   | A    | I    | O          |
| J    | V    | G   | D | B   | X   | M   | .    | DEL  | TG(GAMING) |

**** Nav


***** vi-Style

~MIRYOKU_NAV=VI~

Not available with ~MIRYOKU_LAYERS=FLIP~.


****** Nav

#+NAME: nav-r-vi
| U_RDO | U_PST | U_CPY | U_CUT | U_UND |
| LEFT  | DOWN  | UP    | RGHT  | CAPS  |
| HOME  | PGDN  | PGUP  | END   | INS   |
| ENT   | BSPC  | DEL   | U_NP  | U_NP  |


****** Mouse

#+NAME: mouse-r-vi
| U_RDO | U_PST | U_CPY | U_CUT | U_UND |
| MS_L  | MS_D  | MS_U  | MS_R  |       |
| WH_L  | WH_D  | WH_U  | WH_R  |       |
| BTN1  | BTN3  | BTN2  | U_NP  | U_NP  |


****** Media

#+NAME: media-r-vi
| RGB_TOG  | RGB_MOD  | RGB_HUI  | RGB_SAI  | RGB_VAI  |
| MPRV     | VOLD     | VOLU     | MNXT     | OUT_AUTO |
| U_BTSEL0 | U_BTSEL1 | U_BTSEL2 | U_BTSEL3 | U_BTCLR  |
| MSTP     | MPLY     | MUTE     | U_NP     | U_NP     |


***** Inverted-T

~MIRYOKU_NAV=INVERTEDT~

Only available with ~MIRYOKU_LAYERS=FLIP~.


****** Nav

#+NAME: nav-l-invertedt
| PGUP  | HOME  | UP    | END   | INS   |
| PGDN  | LEFT  | DOWN  | RGHT  | CAPS  |
| U_UND | U_CUT | U_CPY | U_PST | U_RDO |
| U_NP  | U_NP  | DEL   | BSPC  | ENT   |


****** Mouse

#+NAME: mouse-l-invertedt
| WH_U  | WH_L  | MS_U  | WH_R  |       |
| WH_D  | MS_L  | MS_D  | MS_R  |       |
| U_UND | U_CUT | U_CPY | U_PST | U_RDO |
| U_NP  | U_NP  | BTN2  | BTN3  | BTN1  |


****** Media

#+NAME: media-l-invertedt
| U_BTSEL0 | U_BTSEL1 | VOLU    | U_BTSEL2 | U_BTSEL3 |
| U_BTCLR  | MPRV     | VOLD    | MNXT     | OUT_AUTO |
| RGB_MOD  | RGB_HUI  | RGB_SAI | RGB_VAI  | RGB_TOG  |
| U_NP     | U_NP     | MUTE    | MPLY     | MSTP     |


**** COMMENT Clipboard


***** Default

#+NAME: clipboard
| U_RDO | AGIN      |
| U_PST | S(KC_INS) |
| U_CPY | C(KC_INS) |
| U_CUT | S(KC_DEL) |
| U_UND | UNDO   |


***** Fun Cluster

~MIRYOKU_CLIPBOARD=FUN~

#+NAME: clipboard-fun
| U_RDO | AGIN |
| U_PST | PSTE |
| U_CPY | COPY |
| U_CUT | CUT  |
| U_UND | UNDO |


***** Mac

~MIRYOKU_CLIPBOARD=MAC~

#+NAME: clipboard-mac
| U_RDO | SCMD(KC_Z) |
| U_PST | LCMD(KC_V) |
| U_CPY | LCMD(KC_C) |
| U_CUT | LCMD(KC_X) |
| U_UND | LCMD(KC_Z) |


***** Windows

~MIRYOKU_CLIPBOARD=WIN~

#+NAME: clipboard-win
| U_RDO | C(KC_Y) |
| U_PST | C(KC_V) |
| U_CPY | C(KC_C) |
| U_CUT | C(KC_X) |
| U_UND | C(KC_Z) |


**** Layers

***** Gaming Layer
#+NAME: gaming
| ESC  | C    | Y | F   | K   | Z   | L | DOT  | U    | Q          |
| R    | S    | T | H   | P   | W   | N | A    | I    | O          |
| J    | V    | G | D   | B   | X   | M | .    | DEL  | TG(GAMING) |
| U_NP | U_NP | Q | SPC | TAB | ENT | E | BSPC | U_NP | U_NP       |


***** Flip

~MIRYOKU_LAYERS=FLIP~


****** Thumbs

#+NAME: thumbs-flip
| U_NP | U_NP | DEL  | BSPC | ENT  | TAB  | SPC  | ESC  | U_NP | U_NP |


****** Hold

#+NAME: hold-flip
| RESET  |        |        |        |        |        |        |        |        | RESET  |
| LGUI   | LALT   | LCTL   | LSFT   |        |        | LSFT   | LCTL   | LALT   | LGUI   |
| BUTTON | ALGR   |        |        |        |        |        |        | ALGR   | BUTTON |
| U_NP   | U_NP   | FUN    | NUM    | SYM    | MOUSE  | NAV    | MEDIA  | U_NP   | U_NP   |


****** Nav

#+NAME: nav-l
| HOME  | PGDN  | PGUP  | END   | INS   |
| LEFT  | DOWN  | UP    | RGHT  | CAPS  |
| U_UND | U_CUT | U_CPY | U_PST | U_RDO |
| U_NP  | U_NP  | DEL   | BSPC  | ENT   |


****** Mouse

#+NAME: mouse-l
| WH_L  | WH_D  | WH_U  | WH_R  |       |
| MS_L  | MS_D  | MS_U  | MS_R  |       |
| U_UND | U_CUT | U_CPY | U_PST | U_RDO |
| U_NP  | U_NP  | BTN2  | BTN3  | BTN1  |


****** Media

#+NAME: media-l
| RGB_MOD  | RGB_HUI  | RGB_SAI  | RGB_VAI  | RGB_TOG  |
| MPRV     | VOLD     | VOLU     | MNXT     | OUT_AUTO |
| U_BTSEL0 | U_BTSEL1 | U_BTSEL2 | U_BTSEL3 | U_BTCLR  |
| U_NP     | U_NP     | MUTE     | MPLY     | MSTP     |


****** Num

#+NAME: num-r
| [    | 7    | 8    | 9    | ]    |
| =    | 4    | 5    | 6    | ;    |
| \    | 1    | 2    | 3    | `    |
| MINS | 0    | DOT  | U_NP | U_NP |


****** Sym

#+NAME: sym-r
| {    | &    | *    | (    | }    |
| +    | $    | %    | ^    | :    |
| PIPE | !    | @    | #    | ~    |
| _    | (    | )    | U_NP | U_NP |


****** Fun

#+NAME: fun-r
| PSCR | F7   | F8   | F9   | F12  |
| SLCK | F4   | F5   | F6   | F11  |
| PAUS | F1   | F2   | F3   | F10  |
| TAB  | SPC  | APP  | U_NP | U_NP |


*** COMMENT Templates

#+NAME: tem
| <l4> | <l4> | <l4> | <l4> | <l4> | <l4> | <l4> | <l4> | <l4> | <l4> |
|------+------+------+------+------+------+------+------+------+------|
|      |      |      |      |      |      |      |      |      |      |
|      |      |      |      |      |      |      |      |      |      |
|      |      |      |      |      |      |      |      |      |      |
| U_NP | U_NP |      |      |      |      |      |      | U_NP | U_NP |

#+NAME: tem-r
| <l4> | <l4> | <l4> | <l4> | <l4> |
|------+------+------+------+------|
|      |      |      |      |      |
|      |      |      |      |      |
|      |      |      |      |      |
| ENT  | BSPC | DEL  | U_NP | U_NP |

#+NAME: tem-l
| <l4> | <l4> | <l4> | <l4> | <l4> |
|------+------+------+------+------|
|      |      |      |      |      |
|      |      |      |      |      |
|      |      |      |      |      |
| U_NP | U_NP | ESC  | SPC  | TAB  |


** Scripts and Data


*** Common


**** layers

#+NAME: layers
| BASE | BUTTON | NAV | MOUSE | MEDIA | NUM | SYM | FUN | NSL | BL | PL | GAMING |


**** symbol-names

Symbol, name, and shifted symbol mappings for use in tables.

#+NAME: symbol-names
| `    | GRV  | ~    | TILD |
| "-"  | MINS | _    | UNDS |
| =    | EQL  | +    | PLUS |
| [    | LBRC | {    | LCBR |
| ]    | RBRC | }    | RCBR |
| \    | BSLS | PIPE | PIPE |
| ;    | SCLN | :    | COLN |
| '    | QUOT | DQUO | DQUO |
| ,    | COMM | <    | LT   |
| "."  | DOT  | >    | GT   |
| /    | SLSH | ?    | QUES |
| 1    | 1    | !    | EXLM |
| 2    | 2    | @    | AT   |
| 3    | 3    | #    | HASH |
| 4    | 4    | $    | DLR  |
| 5    | 5    | %    | PERC |
| 6    | 6    | ^    | CIRC |
| 7    | 7    | &    | AMPR |
| 8    | 8    | *    | ASTR |
| 9    | 9    | (    | LPRN |
| 0    | 0    | )    | RPRN |


**** mods

Modifiers usable in hold table.  Need to have the same name for ~KC_~ and ~_T~
versions.

#+NAME: mods
| LSFT | LCTL | LALT | LGUI | ALGR |


**** keycode-translation

Source keycode to implementation equivalent (source, QMK, ZMK).

#+NAME: keycode-translation
| 0          | 0          | NUM_0           |
| 1          | 1          | NUM_1           |
| 2          | 2          | NUM_2           |
| 3          | 3          | NUM_3           |
| 4          | 4          | NUM_4           |
| 5          | 5          | NUM_5           |
| 6          | 6          | NUM_6           |
| 7          | 7          | NUM_7           |
| 8          | 8          | NUM_8           |
| 9          | 9          | NUM_9           |
| AGIN       | AGIN       | K_AGAIN         |
| ALGR       | ALGR       | RALT            |
| AMPR       | AMPR       | AMPS            |
| APP        | APP        | K_APP           |
| ASTR       | ASTR       | ASTRK           |
| AT         | AT         | AT              |
| BSLS       | BSLS       | BSLH            |
| BSPC       | BSPC       | BSPC            |
| U_BTCLR    | U_NU       | &bt BT_CLR      |
| U_BTSEL0   | U_NU       | &bt BT_SEL 0    |
| U_BTSEL1   | U_NU       | &bt BT_SEL 1    |
| U_BTSEL2   | U_NU       | &bt BT_SEL 2    |
| U_BTSEL3   | U_NU       | &bt BT_SEL 3    |
| U_BTSEL4   | U_NU       | &bt BT_SEL 4    |
| BTN1       | BTN1       | U_BTN1          |
| BTN2       | BTN2       | U_BTN2          |
| BTN3       | BTN3       | U_BTN3          |
| CAPS       | CAPS       | CAPS            |
| CIRC       | CIRC       | CRRT            |
| COLN       | COLN       | COLON           |
| COMM       | COMM       | COMMA           |
| COPY       | COPY       | K_COPY          |
| CUT        | CUT        | K_CUT           |
| DEL        | DEL        | DEL             |
| DLR        | DLR        | DLLR            |
| DOT        | DOT        | DOT             |
| DOWN       | DOWN       | DOWN            |
| DQUO       | DQUO       | DQT             |
| END        | END        | END             |
| ENT        | ENT        | RET             |
| EQL        | EQL        | EQL             |
| ESC        | ESC        | ESC             |
| EXLM       | EXLM       | EXCL            |
| F1         | F1         | F1              |
| F2         | F2         | F2              |
| F3         | F3         | F3              |
| F4         | F4         | F4              |
| F5         | F5         | F5              |
| F6         | F6         | F6              |
| F7         | F7         | F7              |
| F8         | F8         | F8              |
| F9         | F9         | F9              |
| F10        | F10        | F10             |
| F11        | F11        | F11             |
| F12        | F12        | F12             |
| GRV        | GRV        | GRAVE           |
| GT         | GT         | GT              |
| HASH       | HASH       | HASH            |
| HOME       | HOME       | HOME            |
| INS        | INS        | INS             |
| LALT       | LALT       | LALT            |
| LBRC       | LBRC       | LBKT            |
| LCBR       | LCBR       | LBRC            |
| LCTL       | LCTL       | LCTRL           |
| LEFT       | LEFT       | LEFT            |
| LGUI       | LGUI       | LGUI            |
| LPRN       | LPRN       | LPAR            |
| LSFT       | LSFT       | LSHFT           |
| LT         | LT         | LT              |
| MINS       | MINS       | MINUS           |
| MNXT       | MNXT       | C_NEXT          |
| MPLY       | MPLY       | C_PP            |
| MPRV       | MPRV       | C_PREV          |
| MS_D       | MS_D       | U_MS_D          |
| MS_L       | MS_L       | U_MS_L          |
| MS_R       | MS_R       | U_MS_R          |
| MS_U       | MS_U       | U_MS_U          |
| MSTP       | MSTP       | C_STOP          |
| MUTE       | MUTE       | C_MUTE          |
| NO         | NO         | &none           |
| OUT_AUTO   | OUT_AUTO   | &out OUT_TOG    |
| OUT_BT     | OUT_BT     | &out OUT_BT     |
| OUT_USB    | OUT_USB    | &out OUT_USB    |
| PAUS       | PAUS       | PAUSE_BREAK     |
| PERC       | PERC       | PRCT            |
| PGDN       | PGDN       | PG_DN           |
| PGUP       | PGUP       | PG_UP           |
| PIPE       | PIPE       | PIPE            |
| PLUS       | PLUS       | PLUS            |
| PSCR       | PSCR       | PSCRN           |
| PSTE       | PSTE       | K_PASTE         |
| QUES       | QUES       | QMARK           |
| QUOT       | QUOT       | SQT             |
| RBRC       | RBRC       | RBKT            |
| RCBR       | RCBR       | RBRC            |
| RESET      | RESET      | &bootloader     |
| RGB_HUI    | RGB_HUI    | &rgb_ug RGB_HUI |
| RGB_MOD    | RGB_MOD    | &rgb_ug RGB_EFF |
| RGB_SAI    | RGB_SAI    | &rgb_ug RGB_SAI |
| RGB_TOG    | RGB_TOG    | &rgb_ug RGB_TOG |
| RGB_VAI    | RGB_VAI    | &rgb_ug RGB_BRI |
| RGHT       | RGHT       | RIGHT           |
| RPRN       | RPRN       | RPAR            |
| SCLN       | SCLN       | SEMI            |
| SLCK       | SLCK       | SLCK            |
| SLSH       | SLSH       | SLASH           |
| SPC        | SPC        | SPC             |
| TAB        | TAB        | TAB             |
| TILD       | TILD       | TILDE           |
| TRNS       | TRNS       | &trans          |
| UNDO       | UNDO       | K_UNDO          |
| UNDS       | UNDS       | UNDER           |
| UP         | UP         | UP              |
| VOLD       | VOLD       | C_VOL_DN        |
| VOLU       | VOLU       | C_VOL_UP        |
| WH_D       | WH_D       | U_WH_D          |
| WH_L       | WH_L       | U_WH_L          |
| WH_R       | WH_R       | U_WH_R          |
| WH_U       | WH_U       | U_WH_U          |
| U_MT       | U_MT       | LS(LNLCK)       |
| TG(GAMING) | TG(GAMING) | &tog GAMING     |


**** table-layer-init

#+NAME: table-layer-init
#+BEGIN_SRC python :session :var symbol_names_table=symbol-names :var nonkc_table=nonkc :var nonkp_table=nonkp :var keycode_translation_table=keycode-translation :var layers_table=layers :var mods_table=mods :var target="qmk" :tangle no :results verbatim
width = 19
mods_dict = dict.fromkeys(mods_table[0])
layers_dict = dict.fromkeys(layers_table[0])
symbol_names_dict = {}
shifted_symbol_names_dict = {}
for symbol, name, shifted_symbol, shifted_name in symbol_names_table:
  symbol_names_dict[symbol] = name
  symbol_names_dict[shifted_symbol] = shifted_name
  shifted_symbol_names_dict[symbol] = shifted_name
keycode_translation_dict = {}
if target == 'qmk':
  nonbasic_tuple = tuple(nonkc_table[0])
  basic_prefix = 'KC_'
  for standard, qmk, zmk in keycode_translation_table:
    keycode_translation_dict[standard] = qmk
elif target == 'zmk':
  nonbasic_tuple = tuple(nonkp_table[0])
  basic_prefix = '&kp '
  for standard, qmk, zmk in keycode_translation_table:
    keycode_translation_dict[standard] = zmk
results = '// target: ' + target
results
#+END_SRC

#+RESULTS: table-layer-init
: // target: qmk


**** table-layer-taphold

Produce base layer from separate alphas, thumbs, and hold tables.

#+NAME: table-layer-taphold
#+BEGIN_SRC python :session :var alphas_table=rsthp :var thumbs_table=thumbs :var hold_table=hold :tangle no :results verbatim
results = ''
for tap_row, hold_row in zip(alphas_table + thumbs_table, hold_table):
  for tap, hold in zip(tap_row, hold_row):
    if tap == '':
      code = 'U_NU'
    elif tap in symbol_names_dict:
      code = symbol_names_dict[tap]
    else:
      code = tap
    if code in keycode_translation_dict:
      code = keycode_translation_dict[code]
    if hold in mods_dict:
      if hold in keycode_translation_dict:
        hold = keycode_translation_dict[hold]
      if target == 'qmk':
        code = basic_prefix + str(code)
        code = str(hold) + '_T(' + code + ')'
      elif target == 'zmk':
        code = '&hm ' + str(hold) + ' ' + code
    elif hold in layers_dict:
      if target == 'qmk':
        code = basic_prefix + str(code)
        code = 'LT(' + str(hold) + ', ' + code + ')'
      elif target == 'zmk':
        code = '&lt ' + str(hold) + ' ' + code
    elif not str(code).startswith(nonbasic_tuple):
      code = basic_prefix + str(code)
    results += (code + ', ').ljust(width)
  results += '\\\n'
results = results.rstrip(', \\\n')
results
#+END_SRC

#+RESULTS: table-layer-taphold
: U_NU,              KC_C,              KC_Y,              KC_F,              KC_K,              KC_Z,              KC_L,              KC_COMM,           KC_U,              KC_Q,              \
: LGUI_T(KC_R),      LALT_T(KC_S),      LCTL_T(KC_T),      LSFT_T(KC_H),      KC_P,              KC_W,              LSFT_T(KC_N),      LCTL_T(KC_A),      LALT_T(KC_I),      LGUI_T(KC_O),      \
: KC_J,              ALGR_T(KC_V),      KC_G,              KC_D,              KC_B,              KC_X,              KC_M,              KC_DOT,            ALGR_T(KC_DEL),    KC_TG(GAMING),     \
: U_NP,              U_NP,              KC_TAB,            KC_E,              KC_ESC,            LT(NSL, KC_ENT),   LT(PL, KC_SPC),    LT(BL, KC_BSPC),   U_NP,              U_NP



**** table-layer-half

Produce sub layers from single hand and hold tables.

#+NAME: table-layer-half
#+BEGIN_SRC python :session :var hold_table=hold :var mode="r" :var half_table=mouse-r :var shift="false" :tangle no :results verbatim
length = len(half_table[0])
results = ''
for half_row, hold_row in zip(half_table, hold_table):
  hold_row_l, hold_row_r = hold_row[:length], hold_row[length:]
  for lr, hold_row_lr in ('l', hold_row_l), ('r', hold_row_r):
    if lr == mode:
      for half in half_row:
        if half == '':
          code = 'U_NU'
        elif shift == "true" and half in shifted_symbol_names_dict:
          code = shifted_symbol_names_dict[half]
        elif half in symbol_names_dict:
          code = symbol_names_dict[half]
        else:
          code = half
        if code in keycode_translation_dict:
          code = keycode_translation_dict[code]
        if not str(code).startswith(nonbasic_tuple):
          code = basic_prefix + str(code)
        results += (str(code) + ', ').ljust(width)
    else:
      for hold in hold_row_lr:
        if hold in mods_dict:
          if hold in keycode_translation_dict:
            hold = keycode_translation_dict[hold]
          code = basic_prefix + str(hold)
        else:
          if hold in keycode_translation_dict:
            hold = keycode_translation_dict[hold]
          if hold == '' or hold in layers_dict:
            code = 'U_NA'
          elif str(hold).startswith(nonbasic_tuple):
            code = hold
          else:
            code = basic_prefix + str(hold)
        results += (str(code) + ', ').ljust(width)
  results += '\\\n'
results = results.rstrip(', \\\n')
results
#+END_SRC

#+RESULTS: table-layer-half
: RESET,             U_NA,              U_NA,              U_NA,              U_NA,              U_RDO,             U_PST,             U_CPY,             U_CUT,             U_UND,             \
: KC_LGUI,           KC_LALT,           KC_LCTL,           KC_LSFT,           U_NA,              U_NU,              KC_MS_L,           KC_MS_D,           KC_MS_U,           KC_MS_R,           \
: U_NA,              KC_ALGR,           U_NA,              U_NA,              KC_MOUR,           U_NU,              KC_WH_L,           KC_WH_D,           KC_WH_U,           KC_WH_R,           \
: U_NP,              U_NP,              KC_MEDR,           KC_NAVR,           KC_NR,             KC_BTN1,           KC_BTN3,           KC_BTN2,           U_NP,              U_NP





**** table-layer-full

Produce full layer from single table.  Fill for unused keys is configurable.

#+NAME: table-layer-full
#+BEGIN_SRC python :session :var table=button :var fill="NO" :tangle no :results verbatim
results = ''
for row in table:
  for key in row:
    if key == '':
      code = fill
    elif key in symbol_names_dict:
      code = symbol_names_dict[key]
    else:
      code = key
    if code in keycode_translation_dict:
      code = keycode_translation_dict[code]
    if not str(code).startswith(nonbasic_tuple):
        code = basic_prefix + str(code)
    results += (code + ', ').ljust(width)
  results += '\\\n'
results = results.rstrip(', \\\n')
results
#+END_SRC

#+RESULTS: table-layer-full
: U_UND,             U_CUT,             U_CPY,             U_PST,             U_RDO,             U_RDO,             U_PST,             U_CPY,             U_CUT,             U_UND,             \
: KC_LGUI,           KC_LALT,           KC_LCTL,           KC_LSFT,           KC_NO,             KC_NO,             KC_LSFT,           KC_LCTL,           KC_LALT,           KC_LGUI,           \
: U_UND,             U_CUT,             U_CPY,             U_PST,             U_RDO,             U_RDO,             U_PST,             U_CPY,             U_CUT,             U_UND,             \
: U_NP,              U_NP,              KC_BTN2,           KC_BTN3,           KC_BTN1,           KC_BTN1,           KC_BTN3,           KC_BTN2,           U_NP,              U_NP


**** layer-body

Body of miryoku_layer.h.

#+NAME: layer-body
#+BEGIN_SRC C :main no :tangle no
#pragma once

#include "miryoku_alternatives.h"

#if !defined(MIRYOKU_LAYER_BASE)
  #if defined (MIRYOKU_LAYERS_FLIP)
    #if defined (MIRYOKU_ALPHAS_AZERTY)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_AZERTY_FLIP
    #elif defined (MIRYOKU_ALPHAS_COLEMAK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_COLEMAK_FLIP
    #elif defined (MIRYOKU_ALPHAS_COLEMAKDHK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_COLEMAKDHK_FLIP
    #elif defined (MIRYOKU_ALPHAS_DVORAK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_DVORAK_FLIP
    #elif defined (MIRYOKU_ALPHAS_HALMAK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_HALMAK_FLIP
    #elif defined (MIRYOKU_ALPHAS_WORKMAN)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_WORKMAN_FLIP
    #elif defined (MIRYOKU_ALPHAS_QWERTY)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_QWERTY_FLIP
    #elif defined (MIRYOKU_ALPHAS_QWERTZ)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_QWERTZ_FLIP
    #else
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_COLEMAKDH_FLIP
    #endif
  #else
    #if defined (MIRYOKU_ALPHAS_AZERTY)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_AZERTY
    #elif defined (MIRYOKU_ALPHAS_COLEMAK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_COLEMAK
    #elif defined (MIRYOKU_ALPHAS_COLEMAKDHK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_COLEMAKDHK
    #elif defined (MIRYOKU_ALPHAS_DVORAK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_DVORAK
    #elif defined (MIRYOKU_ALPHAS_HALMAK)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_HALMAK
    #elif defined (MIRYOKU_ALPHAS_WORKMAN)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_WORKMAN
    #elif defined (MIRYOKU_ALPHAS_QWERTY)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_QWERTY
    #elif defined (MIRYOKU_ALPHAS_QWERTZ)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_QWERTZ
    #elif defined (MIRYOKU_ALPHAS_RSTHP)
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_RSTHP
    #else
      #define MIRYOKU_LAYER_BASE MIRYOKU_ALTERNATIVES_BASE_COLEMAKDH
    #endif
  #endif
#endif

#if !defined(MIRYOKU_LAYER_NAV)
  #if defined (MIRYOKU_LAYERS_FLIP)
    #if defined (MIRYOKU_NAV_INVERTEDT)
      #define MIRYOKU_LAYER_NAV MIRYOKU_ALTERNATIVES_NAV_INVERTEDT_FLIP
    #else
      #define MIRYOKU_LAYER_NAV MIRYOKU_ALTERNATIVES_NAV_FLIP
    #endif
  #else
    #if defined (MIRYOKU_NAV_VI)
      #define MIRYOKU_LAYER_NAV MIRYOKU_ALTERNATIVES_NAV_VI
    #else
      #define MIRYOKU_LAYER_NAV MIRYOKU_ALTERNATIVES_NAV
    #endif
  #endif
#endif

#if !defined(MIRYOKU_LAYER_MOUSE)
  #if defined (MIRYOKU_LAYERS_FLIP)
    #if defined (MIRYOKU_NAV_INVERTEDT)
      #define MIRYOKU_LAYER_MOUSE MIRYOKU_ALTERNATIVES_MOUSE_INVERTEDT_FLIP
    #else
      #define MIRYOKU_LAYER_MOUSE MIRYOKU_ALTERNATIVES_MOUSE_FLIP
    #endif
  #else
    #if defined (MIRYOKU_NAV_VI)
      #define MIRYOKU_LAYER_MOUSE MIRYOKU_ALTERNATIVES_MOUSE_VI
    #else
      #define MIRYOKU_LAYER_MOUSE MIRYOKU_ALTERNATIVES_MOUSE
    #endif
  #endif
#endif

#if !defined(MIRYOKU_LAYER_MEDIA)
  #if defined (MIRYOKU_LAYERS_FLIP)
    #if defined (MIRYOKU_NAV_INVERTEDT)
      #define MIRYOKU_LAYER_MEDIA MIRYOKU_ALTERNATIVES_MEDIA_INVERTEDT_FLIP
    #else
      #define MIRYOKU_LAYER_MEDIA MIRYOKU_ALTERNATIVES_MEDIA_FLIP
    #endif
  #else
    #if defined (MIRYOKU_NAV_VI)
      #define MIRYOKU_LAYER_MEDIA MIRYOKU_ALTERNATIVES_MEDIA_VI
    #else
      #define MIRYOKU_LAYER_MEDIA MIRYOKU_ALTERNATIVES_MEDIA
    #endif
  #endif
#endif

#if !defined(MIRYOKU_LAYER_NUM)
  #if defined (MIRYOKU_LAYERS_FLIP)
    #define MIRYOKU_LAYER_NUM MIRYOKU_ALTERNATIVES_NUM_FLIP
  #else
    #define MIRYOKU_LAYER_NUM MIRYOKU_ALTERNATIVES_NUM
  #endif
#endif

#if !defined(MIRYOKU_LAYER_SYM)
  #if defined (MIRYOKU_LAYERS_FLIP)
    #define MIRYOKU_LAYER_SYM MIRYOKU_ALTERNATIVES_SYM_FLIP
  #else
    #define MIRYOKU_LAYER_SYM MIRYOKU_ALTERNATIVES_SYM
  #endif
#endif

#if !defined(MIRYOKU_LAYER_FUN)
  #if defined (MIRYOKU_LAYERS_FLIP)
    #define MIRYOKU_LAYER_FUN MIRYOKU_ALTERNATIVES_FUN_FLIP
  #else
    #define MIRYOKU_LAYER_FUN MIRYOKU_ALTERNATIVES_FUN
  #endif
#endif

#if !defined(MIRYOKU_LAYER_BUTTON)
  #define MIRYOKU_LAYER_BUTTON MIRYOKU_ALTERNATIVES_BUTTON
#endif

#if !defined(MIRYOKU_LAYER_BL)
  #define MIRYOKU_LAYER_BL MIRYOKU_ALTERNATIVES_BL
#endif

#if !defined(MIRYOKU_LAYER_PL)
  #define MIRYOKU_LAYER_PL MIRYOKU_ALTERNATIVES_PL
#endif

#if !defined(MIRYOKU_LAYER_NSL)
  #define MIRYOKU_LAYER_NSL MIRYOKU_ALTERNATIVES_NSL
#endif

#if !defined(MIRYOKU_LAYER_GAMING)
  #define MIRYOKU_LAYER_GAMING MIRYOKU_ALTERNATIVES_GAMING
#endif
#+END_SRC


**** COMMENT python-version

C-c C-c in code block to update

#+NAME: python-version
#+BEGIN_SRC python :tangle no
import sys
return sys.version
#+END_SRC


*** Miryoku QMK


**** nonkc

Keycodes that match any of these prefixes will not have ~KC_~ automatically
prepended.

#+NAME: nonkc
| U_ | RGB_ | OUT_ | RESET | S( | C( | SCMD( | LCMD( |


**** license-qmk

License for tangled QMK C source files.

#+NAME: license-qmk
#+BEGIN_SRC C :main no :tangle no
// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
#+END_SRC


**** layer-names-list

#+NAME: layer-names-list
#+BEGIN_SRC python :var layers_table=layers :tangle no
layers_list = layers_table[0]
results = ', '.join(layers_list)
return results
#+END_SRC

#+RESULTS: layer-names-list
: BASE, BUTTON, NAV, MOUSE, MEDIA, NUM, SYM, FUN, NSL, BL, PL, GAMING



*** Miryoku ZMK


**** nonkp

Keycodes that match any of these prefixes will not have ~&kp~ automatically
prepended.

#+NAME: nonkp
| U_ | & |


**** layer-names-defines

#+NAME: layer-names-defines
#+BEGIN_SRC python :var layers_table=layers :tangle no
width = 7
layers_list = layers_table[0]
results = ''
i = 0
for layer in layers_list:
  results += '#define ' + ( layer + ' ').ljust(width) + str(i) + '\n'
  i += 1
return results
#+END_SRC

#+RESULTS: layer-names-defines
#define BASE   0
#define BUTTON 1
#define NAV    2
#define MOUSE  3
#define MEDIA  4
#define NUM    5
#define SYM    6
#define FUN    7
#define NSL    8
#define BL     9
#define PL     10
#define GAMING 11



** Tangled Files


*** Miryoku QMK


**** [[tangled/qmk/miryoku_layer_names.h]]

#+BEGIN_SRC C :main no :noweb yes :padline no :mkdirp yes :tangle tangled/qmk/miryoku_layer_names.h
// Copyright 2019 Manna Harbour
// https://github.com/manna-harbour/miryoku
// generated -*- buffer-read-only: t -*-

<<license-qmk>>

#if !defined (MIRYOKU_LAYER_NAMES)
  #define MIRYOKU_LAYER_NAMES <<layer-names-list()>>
#endif

#+END_SRC


**** [[tangled/qmk/miryoku_alternatives.h]]

#+BEGIN_SRC C :main no :noweb yes :padline no :mkdirp yes :tangle tangled/qmk/miryoku_alternatives.h
// Copyright 2019 Manna Harbour
// https://github.com/manna-harbour/miryoku
// generated -*- buffer-read-only: t -*-
<<table-layer-init(target="qmk")>>

<<license-qmk>>

#pragma once

#define MIRYOKU_ALTERNATIVES_BASE_AZERTY_FLIP \
<<table-layer-taphold(alphas_table=azerty, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAK_FLIP \
<<table-layer-taphold(alphas_table=colemak, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDH_FLIP \
<<table-layer-taphold(alphas_table=colemakdh, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDHK_FLIP \
<<table-layer-taphold(alphas_table=colemakdhk, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_DVORAK_FLIP \
<<table-layer-taphold(alphas_table=dvorak, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_HALMAK_FLIP \
<<table-layer-taphold(alphas_table=halmak, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_WORKMAN_FLIP \
<<table-layer-taphold(alphas_table=workman, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTY_FLIP \
<<table-layer-taphold(alphas_table=qwerty, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTZ_FLIP \
<<table-layer-taphold(alphas_table=qwertz, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_AZERTY \
<<table-layer-taphold(alphas_table=azerty)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAK \
<<table-layer-taphold(alphas_table=colemak)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDH \
<<table-layer-taphold(alphas_table=colemakdh)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDHK \
<<table-layer-taphold(alphas_table=colemakdhk)>>

#define MIRYOKU_ALTERNATIVES_BASE_DVORAK \
<<table-layer-taphold(alphas_table=dvorak)>>

#define MIRYOKU_ALTERNATIVES_BASE_HALMAK \
<<table-layer-taphold(alphas_table=halmak)>>

#define MIRYOKU_ALTERNATIVES_BASE_WORKMAN \
<<table-layer-taphold(alphas_table=workman)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTY \
<<table-layer-taphold(alphas_table=qwerty)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTZ \
<<table-layer-taphold(alphas_table=qwertz)>>

#define MIRYOKU_ALTERNATIVES_BASE_RSTHP \
<<table-layer-taphold(alphas_table=rsthp)>>


#define MIRYOKU_ALTERNATIVES_NAV_INVERTEDT_FLIP \
<<table-layer-half(half_table=nav-l-invertedt, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_NAV_FLIP \
<<table-layer-half(half_table=nav-l, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_NAV_VI \
<<table-layer-half(half_table=nav-r-vi, mode="r")>>

#define MIRYOKU_ALTERNATIVES_NAV \
<<table-layer-half(half_table=nav-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_MOUSE_INVERTEDT_FLIP \
<<table-layer-half(half_table=mouse-l-invertedt, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MOUSE_FLIP \
<<table-layer-half(half_table=mouse-l, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MOUSE_VI \
<<table-layer-half(half_table=mouse-r-vi, mode="r")>>

#define MIRYOKU_ALTERNATIVES_MOUSE \
<<table-layer-half(half_table=mouse-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_MEDIA_INVERTEDT_FLIP \
<<table-layer-half(half_table=media-l-invertedt, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MEDIA_FLIP \
<<table-layer-half(half_table=media-l, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MEDIA_VI \
<<table-layer-half(half_table=media-r-vi, mode="r")>>

#define MIRYOKU_ALTERNATIVES_MEDIA \
<<table-layer-half(half_table=media-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_NUM_FLIP \
<<table-layer-half(half_table=num-r, mode="r", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_NUM \
<<table-layer-half(half_table=num-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_SYM_FLIP \
<<table-layer-half(half_table=sym-r, mode="r", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_SYM \
<<table-layer-half(half_table=sym-l, mode="l")>>


#define MIRYOKU_ALTERNATIVES_FUN_FLIP \
<<table-layer-half(half_table=fun-r, mode="r", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_FUN \
<<table-layer-half(half_table=fun-l, mode="l")>>

#define MIRYOKU_ALTERNATIVES_BL \
<<table-layer-half(half_table=bl-l, mode="l")>>

#define MIRYOKU_ALTERNATIVES_PL \
<<table-layer-half(half_table=pl-l, mode="l")>>

#define MIRYOKU_ALTERNATIVES_NSL \
<<table-layer-half(half_table=nsl-l, mode="l")>>


#define MIRYOKU_ALTERNATIVES_BUTTON \
<<table-layer-full(table=button)>>

#define MIRYOKU_ALTERNATIVE_GAMING \
<<table-layer-full(table=gaming)>>

#+END_SRC



**** [[tangled/qmk/miryoku_layer.h]]

#+BEGIN_SRC C :main no :noweb yes :padline no :mkdirp yes :tangle tangled/qmk/miryoku_layer.h
// Copyright 2019 Manna Harbour
// https://github.com/manna-harbour/miryoku
// generated -*- buffer-read-only: t -*-

<<license-qmk>>

<<layer-body>>
#+END_SRC


*** Miryoku ZMK


**** [[tangled/zmk/miryoku_layer_names.h]]

#+BEGIN_SRC C :main no :noweb yes :padline no :mkdirp yes :tangle tangled/zmk/miryoku_layer_names.h
// Copyright 2021 Manna Harbour
// https://github.com/manna-harbour/miryoku
// generated -*- buffer-read-only: t -*-

<<layer-names-defines()>>

#+END_SRC


**** [[tangled/zmk/miryoku_alternatives.h]]

#+BEGIN_SRC C :main no :noweb yes :padline no :mkdirp yes :tangle tangled/zmk/miryoku_alternatives.h
// Copyright 2021 Manna Harbour
// https://github.com/manna-harbour/miryoku
// generated -*- buffer-read-only: t -*-
<<table-layer-init(target="zmk")>>

#pragma once

#define MIRYOKU_ALTERNATIVES_BASE_AZERTY_FLIP \
<<table-layer-taphold(alphas_table=azerty, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAK_FLIP \
<<table-layer-taphold(alphas_table=colemak, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDH_FLIP \
<<table-layer-taphold(alphas_table=colemakdh, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDHK_FLIP \
<<table-layer-taphold(alphas_table=colemakdhk, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_DVORAK_FLIP \
<<table-layer-taphold(alphas_table=dvorak, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_HALMAK_FLIP \
<<table-layer-taphold(alphas_table=halmak, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_WORKMAN_FLIP \
<<table-layer-taphold(alphas_table=workman, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTY_FLIP \
<<table-layer-taphold(alphas_table=qwerty, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTZ_FLIP \
<<table-layer-taphold(alphas_table=qwertz, thumbs_table=thumbs-flip, hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_BASE_AZERTY \
<<table-layer-taphold(alphas_table=azerty)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAK \
<<table-layer-taphold(alphas_table=colemak)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDH \
<<table-layer-taphold(alphas_table=colemakdh)>>

#define MIRYOKU_ALTERNATIVES_BASE_COLEMAKDHK \
<<table-layer-taphold(alphas_table=colemakdhk)>>

#define MIRYOKU_ALTERNATIVES_BASE_DVORAK \
<<table-layer-taphold(alphas_table=dvorak)>>

#define MIRYOKU_ALTERNATIVES_BASE_HALMAK \
<<table-layer-taphold(alphas_table=halmak)>>

#define MIRYOKU_ALTERNATIVES_BASE_WORKMAN \
<<table-layer-taphold(alphas_table=workman)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTY \
<<table-layer-taphold(alphas_table=qwerty)>>

#define MIRYOKU_ALTERNATIVES_BASE_QWERTZ \
<<table-layer-taphold(alphas_table=qwertz)>>

#define MIRYOKU_ALTERNATIVES_BASE_RSTHP \
<<table-layer-taphold(alphas_table=rsthp)>>


#define MIRYOKU_ALTERNATIVES_NAV_INVERTEDT_FLIP \
<<table-layer-half(half_table=nav-l-invertedt, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_NAV_FLIP \
<<table-layer-half(half_table=nav-l, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_NAV_VI \
<<table-layer-half(half_table=nav-r-vi, mode="r")>>

#define MIRYOKU_ALTERNATIVES_NAV \
<<table-layer-half(half_table=nav-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_MOUSE_INVERTEDT_FLIP \
<<table-layer-half(half_table=mouse-l-invertedt, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MOUSE_FLIP \
<<table-layer-half(half_table=mouse-l, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MOUSE_VI \
<<table-layer-half(half_table=mouse-r-vi, mode="r")>>

#define MIRYOKU_ALTERNATIVES_MOUSE \
<<table-layer-half(half_table=mouse-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_MEDIA_INVERTEDT_FLIP \
<<table-layer-half(half_table=media-l-invertedt, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MEDIA_FLIP \
<<table-layer-half(half_table=media-l, mode="l", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_MEDIA_VI \
<<table-layer-half(half_table=media-r-vi, mode="r")>>

#define MIRYOKU_ALTERNATIVES_MEDIA \
<<table-layer-half(half_table=media-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_NUM_FLIP \
<<table-layer-half(half_table=num-r, mode="r", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_NUM \
<<table-layer-half(half_table=num-r, mode="r")>>


#define MIRYOKU_ALTERNATIVES_SYM_FLIP \
<<table-layer-half(half_table=sym-r, mode="r", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_SYM \
<<table-layer-half(half_table=sym-l, mode="l")>>


#define MIRYOKU_ALTERNATIVES_FUN_FLIP \
<<table-layer-half(half_table=fun-r, mode="r", hold_table=hold-flip)>>

#define MIRYOKU_ALTERNATIVES_FUN \
<<table-layer-half(half_table=fun-l, mode="l")>>

#define MIRYOKU_ALTERNATIVES_BL \
<<table-layer-half(half_table=bl-l, mode="l")>>

#define MIRYOKU_ALTERNATIVES_PL \
<<table-layer-half(half_table=pl-l, mode="l")>>

#define MIRYOKU_ALTERNATIVES_NSL \
<<table-layer-half(half_table=nsl-l, mode="l")>>

#define MIRYOKU_ALTERNATIVES_GAMING \
<<table-layer-full(table=gaming)>>


#define MIRYOKU_ALTERNATIVES_BUTTON \
<<table-layer-full(table=button)>>

#+END_SRC


**** [[tangled/zmk/miryoku_layer.h]]

#+BEGIN_SRC C :main no :noweb yes :padline no :mkdirp yes :tangle tangled/zmk/miryoku_layer.h
// Copyright 2021 Manna Harbour
// https://github.com/manna-harbour/miryoku
// generated -*- buffer-read-only: t -*-

<<layer-body>>
#+END_SRC


** 

[[https://github.com/manna-harbour][https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/logos/manna-harbour-boa-32.png]]
